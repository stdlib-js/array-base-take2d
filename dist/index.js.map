{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar indexFunction = require( '@stdlib/ndarray-base-ind' ).factory;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar NDIMS = 2;\n\n\n// MAIN //\n\n/**\n* Takes elements from a two-dimensional nested array.\n*\n* ## Notes\n*\n* -   The function does **not** deep copy nested array elements.\n*\n* @param {ArrayLikeObject<Collection>} x - input array\n* @param {NonNegativeIntegerArray} indices - list of indices\n* @param {integer} dimension - dimension along which to take elements\n* @param {string} mode - index mode specifying how to handle an index which is out-of-bounds\n* @throws {RangeError} third argument exceeds the number of dimensions\n* @throws {TypeError} fourth argument must be a recognized index mode\n* @returns {(Array<Array>|Array<Collection>)} output array\n*\n* @example\n* var x = [ [ 1, 2 ], [ 3, 4 ] ];\n* var indices = [ 1, 1, 0, 0, -1, -1 ];\n*\n* var y = take2d( x, indices, 1, 'normalize' );\n* // returns [ [ 2, 2, 1, 1, 2, 2 ], [ 4, 4, 3, 3, 4, 4 ] ]\n*/\nfunction take2d( x, indices, dimension, mode ) {\n\tvar lastIndex;\n\tvar out;\n\tvar dim;\n\tvar ind;\n\tvar idx;\n\tvar i0;\n\tvar i1;\n\tvar x0;\n\tvar y0;\n\n\tdim = normalizeIndex( dimension, NDIMS-1 );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', NDIMS, dimension ) );\n\t}\n\tind = indexFunction( mode );\n\tout = [];\n\tif ( dim === 0 ) {\n\t\tlastIndex = x.length - 1;\n\t\tfor ( i1 = 0; i1 < indices.length; i1++ ) {\n\t\t\tidx = ind( indices[ i1 ], lastIndex );\n\t\t\tout.push( x[ idx ] );\n\t\t}\n\t\treturn out;\n\t}\n\t// Case: dim === 1\n\tfor ( i1 = 0; i1 < x.length; i1++ ) {\n\t\tx0 = x[ i1 ];\n\t\ty0 = [];\n\t\tlastIndex = x0.length - 1;\n\t\tfor ( i0 = 0; i0 < indices.length; i0++ ) {\n\t\t\tidx = ind( indices[ i0 ], lastIndex );\n\t\t\ty0.push( x0[ idx ] );\n\t\t}\n\t\tout.push( y0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = take2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Take elements from a two-dimensional nested array.\n*\n* @module @stdlib/array-base-take2d\n*\n* @example\n* var take2d = require( '@stdlib/array-base-take2d' );\n*\n* var x = [ [ 1, 2 ], [ 3, 4 ] ];\n* var indices = [ 1, 1, 0, 0, -1, -1 ];\n*\n* var y = take2d( x, indices, 1, 'normalize' );\n* // returns [ [ 2, 2, 1, 1, 2, 2 ], [ 4, 4, 3, 3, 4, 4 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAiB,QAAS,sCAAuC,EACjEC,EAAgB,QAAS,0BAA2B,EAAE,QACtDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAQ,EA2BZ,SAASC,EAAQC,EAAGC,EAASC,EAAWC,EAAO,CAC9C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAN,EAAMX,EAAgBO,EAAWJ,EAAM,CAAE,EACpCQ,IAAQ,GACZ,MAAM,IAAI,WAAYT,EAAQ,4GAA6GC,EAAOI,CAAU,CAAE,EAI/J,GAFAK,EAAMX,EAAeO,CAAK,EAC1BE,EAAM,CAAC,EACFC,IAAQ,EAAI,CAEhB,IADAF,EAAYJ,EAAE,OAAS,EACjBU,EAAK,EAAGA,EAAKT,EAAQ,OAAQS,IAClCF,EAAMD,EAAKN,EAASS,CAAG,EAAGN,CAAU,EACpCC,EAAI,KAAML,EAAGQ,CAAI,CAAE,EAEpB,OAAOH,CACR,CAEA,IAAMK,EAAK,EAAGA,EAAKV,EAAE,OAAQU,IAAO,CAInC,IAHAC,EAAKX,EAAGU,CAAG,EACXE,EAAK,CAAC,EACNR,EAAYO,EAAG,OAAS,EAClBF,EAAK,EAAGA,EAAKR,EAAQ,OAAQQ,IAClCD,EAAMD,EAAKN,EAASQ,CAAG,EAAGL,CAAU,EACpCQ,EAAG,KAAMD,EAAIH,CAAI,CAAE,EAEpBH,EAAI,KAAMO,CAAG,CACd,CACA,OAAOP,CACR,CAKAX,EAAO,QAAUK,IC7DjB,IAAIc,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "normalizeIndex", "indexFunction", "format", "NDIMS", "take2d", "x", "indices", "dimension", "mode", "lastIndex", "out", "dim", "ind", "idx", "i0", "i1", "x0", "y0", "main"]
}
