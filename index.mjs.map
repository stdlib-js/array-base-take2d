{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport { factory as indexFunction } from '@stdlib/ndarray-base-ind';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar NDIMS = 2;\n\n\n// MAIN //\n\n/**\n* Takes elements from a two-dimensional nested array.\n*\n* ## Notes\n*\n* -   The function does **not** deep copy nested array elements.\n*\n* @param {ArrayLikeObject<Collection>} x - input array\n* @param {NonNegativeIntegerArray} indices - list of indices\n* @param {integer} dimension - dimension along which to take elements\n* @param {string} mode - index mode specifying how to handle an index which is out-of-bounds\n* @throws {RangeError} third argument exceeds the number of dimensions\n* @throws {TypeError} fourth argument must be a recognized index mode\n* @returns {(Array<Array>|Array<Collection>)} output array\n*\n* @example\n* var x = [ [ 1, 2 ], [ 3, 4 ] ];\n* var indices = [ 1, 1, 0, 0, -1, -1 ];\n*\n* var y = take2d( x, indices, 1, 'normalize' );\n* // returns [ [ 2, 2, 1, 1, 2, 2 ], [ 4, 4, 3, 3, 4, 4 ] ]\n*/\nfunction take2d( x, indices, dimension, mode ) {\n\tvar lastIndex;\n\tvar out;\n\tvar dim;\n\tvar ind;\n\tvar idx;\n\tvar i0;\n\tvar i1;\n\tvar x0;\n\tvar y0;\n\n\tdim = normalizeIndex( dimension, NDIMS-1 );\n\tif ( dim === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', NDIMS, dimension ) );\n\t}\n\tind = indexFunction( mode );\n\tout = [];\n\tif ( dim === 0 ) {\n\t\tlastIndex = x.length - 1;\n\t\tfor ( i1 = 0; i1 < indices.length; i1++ ) {\n\t\t\tidx = ind( indices[ i1 ], lastIndex );\n\t\t\tout.push( x[ idx ] );\n\t\t}\n\t\treturn out;\n\t}\n\t// Case: dim === 1\n\tfor ( i1 = 0; i1 < x.length; i1++ ) {\n\t\tx0 = x[ i1 ];\n\t\ty0 = [];\n\t\tlastIndex = x0.length - 1;\n\t\tfor ( i0 = 0; i0 < indices.length; i0++ ) {\n\t\t\tidx = ind( indices[ i0 ], lastIndex );\n\t\t\ty0.push( x0[ idx ] );\n\t\t}\n\t\tout.push( y0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default take2d;\n"],"names":["take2d","x","indices","dimension","mode","lastIndex","out","dim","ind","idx","i0","i1","x0","y0","normalizeIndex","NDIMS","RangeError","format","indexFunction","length","push"],"mappings":";;8SAwDA,SAASA,EAAQC,EAAGC,EAASC,EAAWC,GACvC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,IAAc,KADdN,EAAMO,EAAgBX,EAAWY,IAEhC,MAAM,IAAIC,WAAYC,EAAQ,4GAxCpB,EAwCwId,IAInJ,GAFAK,EAAMU,EAAed,GACrBE,EAAM,GACO,IAARC,EAAY,CAEhB,IADAF,EAAYJ,EAAEkB,OAAS,EACjBR,EAAK,EAAGA,EAAKT,EAAQiB,OAAQR,IAClCF,EAAMD,EAAKN,EAASS,GAAMN,GAC1BC,EAAIc,KAAMnB,EAAGQ,IAEd,OAAOH,CACP,CAED,IAAMK,EAAK,EAAGA,EAAKV,EAAEkB,OAAQR,IAAO,CAInC,IAFAE,EAAK,GACLR,GAFAO,EAAKX,EAAGU,IAEOQ,OAAS,EAClBT,EAAK,EAAGA,EAAKR,EAAQiB,OAAQT,IAClCD,EAAMD,EAAKN,EAASQ,GAAML,GAC1BQ,EAAGO,KAAMR,EAAIH,IAEdH,EAAIc,KAAMP,EACV,CACD,OAAOP,CACR"}